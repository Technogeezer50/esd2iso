#!/bin/sh
#
# w11arm_esd2iso - download and convert Microsoft ESD files for Windows 11 ARM to ISO
#
# Copyright (C) 2023 Paul Rockwell
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA#
#
# Credit: Location and methods of obtaining Microsoft ESD distributions and
# Microsoft Product catalog from b0gdanw "ESD to ISO on macOS.txt" https://gist.github.com/b0gdanw/e36ea84828dbd19e03eff6158f1fc77c
#


versionID="4.0.2 (13-July-2023)"
version="w11arm_esd2iso ${versionID}\n"
verbosityLevel=0
bOption=0
hOption=0
rOption=0
cmdPath="./bin"
libPath="./lib"
minDiskSpace=12
shaHash=""

#-------------
# Bug fix 13-July-2023
#
# In some cases, open source versions of some *NIX utilities do not have the
# same functionality as the ones bundled with macOS. This can cause this utility to
# fail (the reported case was unable to extract the catalog file from Microsoft cab download)
#
# Ensure that we use macOS versions of utilities with known behavior so that
# they will not be overridden by versions installed via Homebrew or
# MacPorts
#-------------
tar="/usr/bin/tar"
xpath="/usr/bin/xpath"
sed="/usr/bin/sed"
hdiutil="/usr/bin/hdiutil"
awk="/usr/bin/awk"

declare -a lTags
declare -a lDesc


requires="wimlib-imagex aria2c"
requiredLibs="libcrypto libgmp libgmpxx libiconv libicudata libicui18n libicuio libicutest libicutu libicuuc libintl liblzma libuv libwim libxml2 libz"

usage() {
  echo "Usage:\n"
  echo "$0 [-v]"
  echo "$0 [-v] -r work-dir"
  echo "$0 [-Vh]"
  echo "\nOptions:"
  echo "\t-h\tPrint usage and exit"
  echo "\t-v\tEnable verbose output"
  echo "\t-V\tPrint program version and exit"
  echo "\t-r work-dir\n\t\tRestart an interrupted ESD download from a prior execution using work-dir"
  echo
  echo "See the w11arm_esd2iso_manpage.pdf document for complete documentation\n"
}
printVersion() {
	echo $version
}
verboseOn() {
	if (( verbosityLevel == 0 )); then
		return 1
	else
		return 0
	fi
}

printLanguages() {
	local i=1
	
	printf '%s\n\n' "Available Windows 11 ARM languages are:"
	printf '%-20s %-30s\n' "Language tag"	"Language"
	printf '%-20s %-30s\n'  "------------" "--------------------"
    while (( i <= ${#lTags[@]} )); do
    	printf '%-20s %-30s\n' "${lTags[$i]}" "${lDesc[$i]}"
		let i++
    done
    return 0
}
downloadCatalog() {
	local wDir
	local editionType
	local retVal
	local edQuery
	local editionName
	local ltg
	
	wDir=$1
	editionType=$2

	
	if [ ! -d $wDir ]; then
		echo "[ERROR] $wDir is expected to exist for downloadCatalog but doesn't"
		echo "Please report this error"
		exit 1
	fi
	
	#---------------
	# Download and process the Windows Product Catalog so we know what languages are available
	# and the URLs for the downloads
	#---------------
	
	if (( editionType == 0 )); then
		editionName="Home/Professional"
		edQuery='//File[Architecture="ARM64"][Edition="Professional"]'
	else
		editionName="Professiona/Enterprise)"
		edQuery='//File[Architecture="ARM64"][Edition="Enterprise"]'
	fi
	
	echo "\nPlease wait while information is being downloaded from Microsoft for the $editionName ESDs"
	
	aria2c --dir="$wDir" --out=catalog.cab --download-result=hide "https://go.microsoft.com/fwlink?linkid=2156292"
	# curl -L "https://go.microsoft.com/fwlink?linkid=2156292" $showMeter -o $wDir/catalog.cab
    retVal=$?
	(( retVal != 0 )) && return $retVal

	( cd $wDir; $tar xf catalog.cab products.xml; $sed -i .bak 's/\r//' products.xml )

	
	#
	# Get only the W11 Pro ARM64 products
	#
	echo '<Catalog>' > $wDir/w11arm_products.xml
		
	$xpath -q -n -e $edQuery $wDir/products.xml >> $wDir/w11arm_products.xml
	
	echo '</Catalog>'>> $wDir/w11arm_products.xml

	#
	# Load the available languages into arrays for future processing
	# 
	
    for ltg in $($xpath -q -n -e '//File/LanguageCode' $wDir/w11arm_products.xml | $sed -E -e s/"<[\/]?LanguageCode>"//g | sort); do
    	lTags+=("$ltg")
    	lDesc+=("$($xpath -q -n -e '//File[LanguageCode="'$ltg'"]/Language' $workingDir/w11arm_products.xml | $sed -E -e s/'(<Language>)|(<\/Language>)'//g )")
    done
	echo "Processing complete"
	return 0
}

setupEsdDownload(){

	#---------------
	# Find the desired language variant file 
	#
	# Now that we know we have an image available in the desired language,
	# build the file names for the download URL (from the Microsoft catalog info),
	# the file name for the ESD that resides in the working directory
	# and the name of the ISO we're going to generate
	#---------------
	
	$xpath -q -n -e '//File[LanguageCode="'$esdLang'"]' $workingDir/w11arm_products.xml >$workingDir/esd_edition.xml
	esdURL=$($xpath -n -q -e '//FilePath' $workingDir/esd_edition.xml | $sed -E -e s/'(<FilePath>)|(<\/FilePath>)'//g)
	buildName=$($xpath -n -q -e '//FileName' $workingDir/esd_edition.xml | $sed -E -e s/'(<FileName>)|(\.esd<[\/]FileName>)'//g)
    shaHash=$($xpath -n -q -e '//Sha1' $workingDir/esd_edition.xml | $sed -E -e s/'(<Sha1>)|(<\/Sha1>)'//g)
	
	esdFile=$workingDir/${buildName}.esd
	isoFile=./${buildName}.iso

	if verboseOn ; then
	    echo "[DEBUG] ESD Download variables"
	    echo "\n\tesdURL = $esdURL"
	    echo "\tbuildName = $buildName"
	    echo "\tesdFile = $esdFile"
	    echo "\tshaHash = $shaHash"
	fi

	echo "Selected language of the ISO is $esdLang"
	# xpath -n -q -e '//Language' $workingDir/esd_edition.xml | sed -E -e s/'(<Language>)|(<\/Language>)'//g
	# verboseOn && echo "[DEBUG] The ESD will be downloaded from\n$esdURL"
	echo "The generated ISO will be $isoFile"
	
	#---------------
	#
	# Write out values of variables that we'll need for restart
	# in a flag file restartOK that we set in the work directory
	#
	#---------------

	touch $workingDir/restartOK
	echo "isoFile\t$isoFile" >> $workingDir/restartOK
	echo "esdFile\t$esdFile" >> $workingDir/restartOK
	echo "esdURL\t$esdURL" >> $workingDir/restartOK
	echo "shaHash\t$shaHash" >>  $workingDir/restartOK

	return 0
}

downloadEsd() {

	local retVal
	local retryCount
	local retryLimit
	local displayInterval
	local calculatedHash
	
	retryLimit=20
	retryCount=0

	#
	# Download the ESD from Microsoft
	#
	echo
	displayInterval=0
	verboseOn && displayInterval=120
	retVal=1
	while (( retryCount < retryLimit ))
	do
		let retryCount+=1
		echo "ESD Download attempt $retryCount"
		aria2c --summary-interval=$displayInterval --dir="$workingDir" --file-allocation=none "$esdURL"
		retVal=$?
		(( retVal == 0 )) && break;
		echo "Download interrupted, \c"
		if (( retryCount < retryLimit )); then
			echo "retrying"
		else 
			echo "retries exceeded"
		fi
	done

	if (( retVal != 0 )); then
		return $retVal
	fi
	return $retVal
}

extractEsd(){	
	
	local eFile
	local eDir
	local retVal
	local esdImageCount
	local bootWimFile
	local installWimFile
	local images
	local imageIndex
	local imageEdition
	local beQuiet
	
	eFile=$1
	eDir=$2
	beQuiet="--quiet"
	bootWimFile=$eDir/sources/boot.wim
	installWimFile=$eDir/sources/install.wim
	images=("4" "5")
	
	verboseOn && beQuiet=""
	
	esdImageCount=$(wimlib-imagex info $eFile | $awk '/Image Count:/ {print $3}')
	verboseOn && echo "[DEBUG] image count in ESD: $esdImageCount"
	(( $esdImageCount == 6 )) && images+=("6")

	#---------------
	# Extract image 1 in the ESD to create the boot environment
	#---------------

	echo "\nApplying boot files to the image"
	wimlib-imagex apply $eFile 1 $eDir $beQuiet 2>/dev/null
	retVal=$?
	if (( retVal != 0 )); then
		echo "[ERROR] Extract of boot files failed"
		return $retVal
	fi

	echo "Boot files successfully applied to image"

	#---------------
	# Create the boot.wim file that contains WinPE and Windows Setup
	# Images 2 and 3 in the ESD contain these components
	#
	# Important: image 3 in the ESD must be marked as bootable when
	# transferred to boot.wim or else the installer will fail
	#---------------

	echo "\nAdding WinPE and Windows Setup to the image"
	wimlib-imagex export $eFile 2 $bootWimFile --compress=LZX --chunk-size 32K $beQuiet
	retVal=$?
	if (( retVal != 0 )); then
		echo "[ERROR] Add of WinPE failed"
		return $retVal
	fi

	wimlib-imagex export $eFile 3 $bootWimFile --compress=LZX --chunk-size 32K --boot $beQuiet
	retVal=$?
	if (( retVal != 0 )); then
		echo "[ERROR] Add of Windows Setup failed"
		return $retVal
	fi
	echo "WinPE and Windows Setup added successfully to image\n"
	
	verboseOn && {
		echo "[DEBUG] contents of $bootWimFile"
		wimlib-imagex info  $bootWimFile
	}


	#---------------
	# Create the install.wim file that contains the files that Setup will install
	# Images 4, 5, (and 6 if it exists) in the ESD contain these components
	#---------------
	
	for imageIndex in ${images[*]}; do
		imageEdition="$(wimlib-imagex info $eFile $imageIndex | grep '^Description:' | sed 's/Description:[ \t]*//')"
		echo "\nAdding $imageEdition to the image"
		wimlib-imagex export $eFile $imageIndex $installWimFile --compress=LZMS --chunk-size 128K $beQuiet
		retVal=$?
		if (( retVal != 0 )); then
			echo "[ERROR] Addition of $imageIndex to the image failed"
			return $retVal
		fi
		echo "$imageEdition added successfully to the image"

	done

	echo "\nAll Windows editions added to image"	
	
	verboseOn && {
		echo "[DEBUG] contents of $installWimFile"
		wimlib-imagex info $installWimFile
	}
	
	return 0
}

buildIso(){
	local iDir=$1
	local iFile=$2
	local elToritoBootFile
	
	iDir=$1
	iFile=$2
	
	if [ -e $iFile ]; then
	  echo "\t[INFO] File $iFile exists, removing it"
	  rm -rf $iFile
	fi

	elToritoBootFile=$iDir/efi/microsoft/boot/efisys.bin
	
	#
	# Create the ISO file
	#

	$hdiutil makehybrid -o $iFile -iso -udf -hard-disk-boot -eltorito-boot $elToritoBootFile $iDir
	return $?
}


#-------------------
#
# Start of program
#
#-------------------


#-------------------
# 
# Process arguments
# 
#-------------------

while getopts ":hr:vV" opt; do
  case $opt in
    h)
    	usage
    	exit 1
    	;;

    r)
    	rOption=1
    	workingDir=$OPTARG
    	;;
    	
	v)
    	let verbosityLevel+=1
    	;;
	V)
    	printVersion
    	exit 1
    	;;
    :)
    	echo "[ERROR] Option -$OPTARG requires an argument"
    	usage
    	exit 1
    	;;
    
    \?)
    	echo "[ERROR] Invalid option: -$OPTARG\n"
    	usage
    	exit 1
    	;;
    esac
done
shift "$((OPTIND-1))"


printVersion


#-------------------
# Check number of arguments
# One argument is allowed when using the -r option for restart
# No arguments are allowed otherwise
#-------------------

if (( $# > 0 )); then
	echo "[ERROR] Too many arguments"
	usage
	exit 1
fi

if [[ ! -d ${cmdPath} ]] || [[ ! -d ${libPath} ]]; then
	echo "[ERROR] Your current working directory $(pwd) is not the directory where $0 was unzipped";
	echo "        Please change your working directory to the directory where you unzipped this utility and rerun it from there"
	exit 1
fi

#--------------------
# Bug fix 21-May-2023
# 
# Downloading the zip file using Safai (maybe others) will result in the
# com.apple.quarantine flag being set on the extracted files. When the utility
# tries to open the bundled utilities, macOS throws Gatekeeper error messages
# such as "unidentified developer" or "can't verify with Apple"
# 
# This fix removes any com.apple.quarantine extended attributes from the
# bundled components so the user doesn't have to deal
# with the Gatekeeper issues.
#--------------------


if verboseOn; then   
	xattr -dr com.apple.quarantine "${cmdPath}" "${libPath}"
else
	xattr -dr com.apple.quarantine "${cmdPath}" "${libPath}" 2>/dev/null
fi    


#-------------------
# Check if required utilities are already installed with MacPorts or
# Homebrew. If they aren't use the bundled version from the download
#-------------------

if /usr/bin/which -s $requires ; then
	echo "[INFO] Required utilities $requires are already installed by \n      Homebrew or MacPorts, They will be used instead of the bundled versions."
else
	# 
	# Set the environment variables necessary for the utility to find and run the bundled
	# open source utilities 
	#
    echo "[INFO] Using bundled utilities"
	PATH="${cmdPath}:${PATH}"
	export DYLD_FALLBACK_LIBRARY_PATH="$libPath"
	verboseOn && echo "[DEBUG] PATH is now set to $PATH"
	verboseOn && echo "[DEBUG] DYLD_FALLBACK_LIBRARY_PATH is now set to $DYLD_FALLBACK_LIBRARY_PATH"
fi

if (( rOption == 0 )) ; then

	#---------------
	#
	# Normal processing, no restart
	#
	#---------------
	
		
	freeSpace=$(df -g . | $awk '/dev.*/ {print $4}')
	verboseOn && echo "[DEBUG] Free space is $freeSpace GB"
	if (( freeSpace < minDiskSpace )) ; then
		echo "[ERROR] You have insufficent space on this disk to complete the ISO build."
		echo "        This utility requires approximately $minDiskSpace GB of free disk space and you have "
		echo "        $freeSpace GB remaining."
		exit 1
	else
		if (( freeSpace < ( minDiskSpace + 3 ) )); then
			echo "[WARNING] This utility typically requires $minDiskSpace to $(( minDiskSpace+3 )) GB of free disk space to complete."
			echo "          You have $freeSpace GB available. You may run out of disk space during the process."
		fi
	fi
    	
    echo "\nDo you want to create an ISO containing Windows 11 ARM Home/Professional editions"
	echo "or Professional/Enterprise editions?\n"

	bOption=-1
	while (( bOption == -1 )); do

		echo "Enter 'h' to create a Home/Professional ISO"
		echo "      'e' to create a Professional/Enterprise ISO"
		echo "      'q' to exit the program without creating an ISO: \c"
		read answer

		case $answer in
			h | H )
				echo "\nWindows 11 ARM Home/Professional ISO will be created."
				bOption=0
				;;
			e | E )
				echo "\nWindows 11 ARM Professional/Enterprise ISO will be created."
				bOption=1
				;;
			q | Q )
				echo "\nExiting program. No ISO was created."
				exit 0
				;;
			* )
				echo "Invalid response. Please try again.\n"
				;;
		esac
	done

    workingDir="$(mktemp -q -d ./esd2iso_temp.XXXXXX)"
	if (( $? != 0 )); then
		echo "[ERROR] Unable to create work directory, exiting"
		exit 1
	fi
	downloadCatalog $workingDir $bOption
	retVal=$?
	if (( retVal != 0 )); then
		echo "[ERROR] Catalog download failed with error $retVal"
		rm -rf $workingDir
		exit 1
	fi

	#---------------
	#
	# extDir is the "extract directory" where we're going to extract the ESD 
	# and evenutally build the ISO from. It's a subdirectory of the working/temp directory
	#
	##---------------

	extDir=$workingDir/ESD_ISO
	mkdir $extDir

	echo "\n\nPlease select a language for your Windows 11 ARM ISO.\n"
	printLanguages
	esdLang=""
	while [[ "x$esdLang" == "x" ]]; do

		echo "\nEnter a language tag from the 'Language Tag' colummn of the list, or"
		echo "'list' to reprint the list of languages, or"
		echo "'quit' to exit the program without creating an ISO: \c"
		read answer

		if [[ $answer == "quit" ]]; then
			echo "Exiting progam. No ISO will be created"
			rm -rf $workingDir
			exit 0
		fi
		if [[ $answer == 'list' ]]; then
			printLanguages
			continue
		fi
		
		found=0
	    for i in ${lTags[*]}; do
			if [[ $answer == $i ]]; then 
				found=1; 
				break
			fi;
		done

		if (( found == 0 )); then
		  echo "$answer is not a valid language tag. Please try again"
		else
		  esdLang="$answer"
		fi
	done
	
	echo "\nStep 1: Getting information about the requested $esdLang ESD file\n"
	setupEsdDownload
	echo "\nStep 1 complete"

	echo "\nStep 2: Downloading ESD from Microsoft"
	
else
	#---------------
	#
	# Restart option selected
	#
	#---------------
	
	#---------------
	#
	# See if the work directory exists and if it supports restart
	#
	#---------------
	
	if [ ! -d $workingDir ]; then
		echo "[ERROR] Work directory $workingDir does not exist, exiting"
		exit 2
	fi
	if [ ! -f "$workingDir/restartOK" ]; then
		echo "[ERROR] The work directory $workingDir does not support restart, exiting"
		exit 2
	fi;
	echo "\nRestarting interrupted download using work directory $workingDir\n"

	#---------------
	#
	# Read variables needed for restart from the restartOK file
	#
	#---------------
	
	extDir=$workingDir/ESD_ISO
	isoFile="$(grep isoFile $workingDir/restartOK | cut -w -f 1)"
	esdFile="$(grep esdFile $workingDir/restartOK | cut -w -f 1)"
	esdURL="$(grep esdURL $workingDir/restartOK | cut -w -f 1)"
	shaHash="$(grep shaHash $workingDir/restartOK | cut -w -f 1)"
	

# 	isoFile=$(cat $workingDir/restartOK | awk '/isoFile/ { print $2 }')
# 	esdFile=$(cat $workingDir/restartOK | awk '/esdFile/ { print $2 }')
# 	esdURL=$(cat $workingDir/restartOK | awk '/esdURL/ { print $2 }')

	if verboseOn ; then
		echo "[DEBUG] Variables found in restart file:"
	    echo "\tesdURL = $esdURL"
	    echo "\tesdFile = $esdFile"
	    echo "\tisoFile = $isoFile"
	    echo "\tshaHash = $shaHash\n"
	fi

	echo "Restarting Step 2: Downloading ESD from Microsoft"
fi
downloadEsd
retVal=$?
if (( retVal != 0 )); then
	echo  "[ERROR] ESD download failed with error $retVal"
	echo "         Download can be restarted with the following command:"
	echo "              $0 -r $workingDir"
	exit 1
fi
rm $workingDir/restartOK

echo "\nDownload complete. Validating download (this may take a minute or so)"
calcHash="$(shasum $esdFile | $awk '{print $1}')"
verboseOn && {
	echo "[DEBUG] shaHash =  '$shaHash'"
	echo "        calcHash = '$calcHash'"
}
if [[ "$calcHash" != "$shaHash" ]]; then
	echo "[ERROR] Download validation failed"
	echo "        Expected hash = $shaHash"
	echo "        Calculated hash = $calcHash"
	echo "Re-run $0 - if this error persists, please post a message on the VMware Fusion forum.\n"
	echo "Work directory $workingDir was not deleted, use for debugging"
	exit 1
else
	echo "Download validated."
	verboseOn && wimlib-imagex info $esdFile
fi

echo "\nStep 2 complete - ESD downloaded"	

echo "\nStep 3: Building installation image from ESD distribution"
extractEsd $esdFile $extDir
retVal=$?
if (( retVal != 0 )); then
	echo "[ERROR] Installation image build failed with error code $retVal"
	echo "Work directory $workingDir was not deleted, use for debugging"
	exit 1
fi

#---------------
# At this point we no longer need the ESD file as it's already extracted
# In order to reduce disk space reauirements, delete the ESD file unless we
# have set the environment variable keepDownloads
#---------------

if [[ "x${keepDownloads}" == "x" ]]; then
	echo \n"ESD added successfully to installation image and is no longer needed.\nDeleting it to save disk space."
	verboseOn && echo "Deleting ESD file ${esdFile}"
	rm -rf ${esdFile} 
	retVal=$?
	if (( retVal != 0 )); then
		echo "[WARNING] Deletion of ESD file encountered a problem."
		echo "          The ISO build can continue, but will consume an addtional 5 GB of disk space."
	else
		echo "ESD file deleted successfully\n"
	fi
else
	verboseOn && echo "[DEBUG] keepDownloads is set - keeping ESD download"
fi

echo "\nStep 3 complete - installation image built"
	
echo "\nStep 4: Creating ISO $isoFile from the installation image\n"

buildIso $extDir $isoFile
retVal=$?
if (( retVal != 0 )); then
	echo "[ERROR] ISO was NOT created"
    echo "Working directory $workingDir was not deleted, use for debugging"
    exit 1
fi

echo "Step 4 complete - ISO created"
echo "\nCleaning up work directory"
rm -rf $workingDir
echo "Done!"
exit 0
